diff --git a/src/evaluate_crpa_energy_kspace.f90 b/src/evaluate_crpa_energy_kspace.f90
index 561ad4993..b712e32d1 100644
--- a/src/evaluate_crpa_energy_kspace.f90
+++ b/src/evaluate_crpa_energy_kspace.f90
@@ -135,11 +135,13 @@
       integer :: i_prodbas_1
       integer :: max_irk_points_task
       integer:: n_freqs_block, i_fblock, lbf, ubf, n_blocks
-
+      integer:: i_rc,j_rc,mu,nu,two_nbas
 !      comm
+      real*8  temp_crpa_grid
+      real*8 :: k_vec(3)
 
       integer :: mpierr
-
+      character(len=100) vFile
 !     begin work
 
       call perfon('ev_rpa')
@@ -237,6 +239,10 @@
       end if
       call check_allocation(i_index, 'polar_kspace_complex                    ')
 
+      write(vFile,*)myid
+      vFile='coulomb_mat_'//trim(adjustl(vFile))//'.txt'
+      open(11,file=vFile)
+      write(11,*)max_irk_points_task
       do i_irk_point_local = 1, max_irk_points_task
          i_irk_point=n_tasks_irkq*(i_irk_point_local-1) + myid_irkq + 1
          do i_fblock=1,n_blocks
@@ -259,6 +265,15 @@
          !this seems to hold, but i don't know why and use real_eigenvectors instead
 !         i_k_point=inv_irk_point_mapping(i_irk_point)
 !         if (i_k_point.eq.kq_point_list(1,i_k_point)) then
+            write(11,*)n_basbas,lbb_row,ubb_row,lbb_col,ubb_col
+            write(11,*)inv_irk_point_mapping(i_irk_point),irk_weight(i_irk_point)
+               !print*, i_irk_point_local
+            do i_rc=lbb_row,ubb_row
+               do j_rc = lbb_col,ubb_col
+                  write(11,'(2F20.15)')coulomb_matr_blacs(i_rc,j_rc,i_irk_point_local)
+                  !print*, coulomb_matr_blacs_real(i_rc,j_rc)
+               end do
+            end do
             if(real_eigenvectors) then 
                allocate(coulomb_matr_blacs_real(lbb_row:ubb_row, lbb_col:ubb_col),stat=i_index)
                allocate(rv_times_polar(lbb_row:ubb_row, lbb_col:ubb_col),stat=i_index)
@@ -325,7 +340,6 @@
                   rpa_c_kgrid(i_irk_point) = rpa_c_kgrid(i_irk_point) + &
                        rpa_c_integrand * womega_full(i_freq) 
                   ! end of loop over i_freq
-                  
                enddo
                deallocate(coulomb_matr_blacs_real,rv_times_polar,rv_times_polar_t)
             else
@@ -401,6 +415,7 @@
             ! end of loop over i_irk_point_local
          enddo
       end do
+      close(11)
       call sync_timing(time_polar)
       call sync_timing(time_rpa_corr)
 
diff --git a/src/get_lvl_tricoeff_bravais.f90 b/src/get_lvl_tricoeff_bravais.f90
index f8ce02cde..2c7b2ed6c 100644
--- a/src/get_lvl_tricoeff_bravais.f90
+++ b/src/get_lvl_tricoeff_bravais.f90
@@ -58,6 +58,10 @@
     character*150 :: info_str
     character(*), parameter :: func = 'get_lvl_tricoeff_bravais'
 
+    integer :: i_c,j_c,k_c
+    real*8 :: dR
+    character(len=100) cFile
+
     write(info_str,'(2X,A)') "Computing the triple LVL expansion coefficents in real space ..."
     call localorb_info(info_str)
 
@@ -68,6 +72,10 @@
 
     lvl_tricoeff_bravais(:,:,:,:) = 0.d0
 
+    write(cFile,*)myid
+    cFile='Cs_data_'//trim(adjustl(cFile))//'.txt'
+    open(1,file=cFile)
+    write(1,*) n_atoms,n_cells
     do i_atom_1 = 1, n_atoms, 1
        i_species_1 = species(i_atom_1)
        basis_off_1 = atom2basis_off(i_atom_1)
@@ -108,6 +116,48 @@
              if(myid .ne. mod(i_cell, n_tasks)) cycle
              i_cell_local = (i_cell-1)/n_tasks + 1
 
+             i_cell_1 = cell_index(i_cell, 1)
+             i_cell_2 = cell_index(i_cell, 2)
+             i_cell_3 = cell_index(i_cell, 3)
+            write(1,*)i_atom_1,i_atom_2,i_cell_1,i_cell_2,i_cell_3, n_sp_basis_1,n_sp_basis_2,n_spbb_1
+            if(myid.eq.mod(1,n_tasks)) then
+              if((i_cell == 1) .and. (i_atom_1 .eq. i_atom_2))  then
+                do i_c=1, n_sp_basis_1,1
+                  do j_c=1, n_sp_basis_2,1
+                    do k_c=1,n_spbb_1,1
+                      write(1,'(F20.15)')coeff_3fn(i_c,j_c,k_c,1,i_cell_local)/2.0
+                    end do
+                  end do
+                end do
+              else
+                do i_c=1, n_sp_basis_1,1
+                  do j_c=1, n_sp_basis_2,1
+                    do k_c=1,n_spbb_1,1
+                      write(1,'(F20.15)') coeff_3fn(i_c,j_c,k_c,1,i_cell_local)
+                    end do
+                  end do
+                end do
+              end if
+            else
+              if((i_cell == 1) .and. (i_atom_1 .eq. i_atom_2)) then
+                do i_c=1, n_sp_basis_1,1
+                  do j_c=1, n_sp_basis_2,1
+                    do k_c=1,n_spbb_1,1
+                      write(1,'(F20.15)')coeff_3fn(i_c,j_c,k_c,1,i_cell_local)/2.0
+                    end do
+                  end do
+                end do
+              else
+                do i_c=1, n_sp_basis_1,1
+                  do j_c=1, n_sp_basis_2,1
+                    do k_c=1,n_spbb_1,1
+                      write(1,'(F20.15)')coeff_3fn(i_c,j_c,k_c,1,i_cell_local)
+                    end do
+                  end do
+                end do
+              end if
+            end if
+              
              lvl_tricoeff_bravais(basis_off_1+1:basis_off_1+n_sp_basis_1, &
              & basis_off_2+1:basis_off_2+n_sp_basis_2, bboff_1+1:bboff_1+n_spbb_1, i_cell_local) &
              & = coeff_3fn(1:n_sp_basis_1,1:n_sp_basis_2,1:n_spbb_1, 1, i_cell_local)
@@ -117,7 +167,6 @@
              & basis_off_2+1:basis_off_2+n_sp_basis_2, bboff_2+1:bboff_2+n_spbb_2, i_cell_local) &
              & = coeff_3fn(1:n_sp_basis_1,1:n_sp_basis_2,1:n_spbb_2, 2, i_cell_local)
             endif
-
 ! end loop over i_cell
           enddo
 
@@ -125,6 +174,7 @@
        enddo
 ! end loop over i_atom_1
     enddo
+    close(1)
 ! The on-site coefficients (which are stored in the first task) have to be halved
 !    do i_cell = 1, n_cells, 1
 !        if(myid .ne. mod(i_cell, n_tasks)) cycle
diff --git a/src/post_scf_correlation_treatment_p0.f90 b/src/post_scf_correlation_treatment_p0.f90
index f699a7ac7..79b2600e4 100644
--- a/src/post_scf_correlation_treatment_p0.f90
+++ b/src/post_scf_correlation_treatment_p0.f90
@@ -107,7 +107,11 @@
           func='post_scf_correlation_treatment_p0'
       ! for parallel threads
       integer :: omp_get_max_threads, omp_get_thread_num, nrThreads, myThreadId, i_thread ,mode
-
+      integer :: ks_i,ks_j,ks_k,ks_l,i_k
+      real*8, allocatable :: lvl_tricoeff_bravais(:,:,:,:)
+      real*8 :: k_vec(3)
+      character(len=100) eFile
+      real*8 :: nt_d_nk
       nrThreads   = 1
       myThreadId = 1
 !$    nrThreads = omp_get_max_threads()
@@ -246,7 +250,120 @@ end if
            write(use_unit,'(2X,A)') "Finished with initialization of Coulomb interaction matrix ..."
            write(use_unit,*)
         endif
+!shirong add 2021-01-19       
+        open(1, file='band_out')
+        write(1,*)n_k_points
+        write(1,*)n_spin
+        write(1,*)n_states
+        write(1,*)n_basis
+        write(1,*)chemical_potential
+        do i_k_point = 1,n_k_points,1
+          do i_spin = 1, n_spin, 1
+            write(1,*)i_k_point,i_spin
+            do i_state = 1, n_states, 1
+                write(1,'(2X,I5,6X,F8.5,5X,F17.9,4X,F15.5)') &
+                     i_state, occ_numbers(i_state, i_spin, i_k_point), &
+                     (KS_eigenvalue(i_state, i_spin, i_k_point)), &
+                     (KS_eigenvalue(i_state, i_spin, i_k_point)*hartree)
+             end do
+          end do
+        end do
+        close(1)
+        ! print *, ' INFO in post_scf ',n_basis,n_states, n_spin,n_k_points_task,n_k_points
+        ! print *, ' KS_eigenvector  size ',size(KS_eigenvector)
+        ! print *, ' KS_eigenvector  dim1 ',size(KS_eigenvector,dim=1)
+        ! print *, ' KS_eigenvector  dim2 ',size(KS_eigenvector,dim=2)
+        ! print *, ' KS_eigenvector  dim3 ',size(KS_eigenvector,dim=3)
+        ! print *, ' KS_eigenvector  dim4 ',size(KS_eigenvector,dim=4)
+        i_k=0
+        
+        write(eFile,*)myid
+        eFile='KS_eigenvector_'//trim(adjustl(eFile))//'.txt'
+        
+       ! write(2,*)'KS_eigenvector dim',real_eigenvectors,n_basis,n_states, n_spin,n_k_points_task
+        nt_d_nk=n_tasks*1.d0/n_k_points
+        open(2,file=eFile)
+        if(use_scalapack) then
+        do i_k_point=1,n_k_points
+          if(myid == CEILING((i_k_point-1)*nt_d_nk)) then
+            write(2,*)i_k_point
+            if(real_eigenvectors) then
+              do ks_i=1, n_basis,1
+                do ks_j=1, n_states,1
+                  do ks_k=1,n_spin,1
+                    write(2,'(2F24.15)')KS_eigenvector(ks_i,ks_j,ks_k,1),0.d0
+                  end do
+                end do
+              end do
+            else
+              do ks_i=1, n_basis,1
+                do ks_j=1, n_states,1
+                  do ks_k=1,n_spin,1
+                    write(2,'(2F24.15)')KS_eigenvector_complex(ks_i,ks_j,ks_k,1)
+                  end do
+                end do
+              end do
+            end if
+          end if
+        end do
+        else
+        do i_k_point = 1, n_k_points
+          if(myid == MOD(i_k_point, n_tasks)  .and. myid <= n_k_points) then
+            i_k=i_k+1
+            write(2,*)i_k_point
+            if(real_eigenvectors) then
+              do ks_i=1, n_basis,1
+                do ks_j=1, n_states,1
+                  do ks_k=1,n_spin,1
+                    write(2,'(2F24.15)')KS_eigenvector(ks_i,ks_j,ks_k,i_k),0.d0
+                  end do
+                end do
+              end do
+            else
+              do ks_i=1, n_basis,1
+                do ks_j=1, n_states,1
+                  do ks_k=1,n_spin,1
+                    write(2,'(2F24.15)')KS_eigenvector_complex(ks_i,ks_j,ks_k,i_k)
+                  end do
+                end do
+              end do
+            end if
+          end if
+        end do 
+        end if
+        close(2)
+
+        open(4,file='stru_out')
+        write(4,*)lattice_vector(:,1)
+        write(4,*)lattice_vector(:,2)
+        write(4,*)lattice_vector(:,3)
+        write(4,*)recip_lattice_vector(:,1)
+        write(4,*)recip_lattice_vector(:,2)
+        write(4,*)recip_lattice_vector(:,3)
+        write(4,*)n_k_points_xyz(:)
+        do i_k_point = 1, n_k_points, 1
+          k_vec = matmul(recip_lattice_vector,k_point_list(i_k_point,:))
+          write(4,*)k_vec
+        end do
+
 
+        
+       ! print*, 'post_scf n_cells  ',n_cells,'      n_task  ',n_tasks
+        if(mod(n_cells, n_tasks).eq.0) then
+          n_cells_task = n_cells/n_tasks
+        else
+          n_cells_task = n_cells/n_tasks+1
+        endif 
+       ! print *, 'post_scf  n_cell_tasks   ', n_cells_task
+        if(.not. allocated(lvl_tricoeff_bravais)) then 
+          allocate(lvl_tricoeff_bravais(n_basis,n_basis,n_basbas,n_cells_task),stat=info)
+          call check_allocation(info,'lvl_tricoeff_bravais',func)
+        endif
+        call get_lvl_tricoeff_bravais(n_cells_task, lvl_tricoeff_bravais)
+
+        if(allocated(lvl_tricoeff_bravais)) then 
+          deallocate(lvl_tricoeff_bravais)
+        endif
 !        if(n_k_points.gt.1) then
            !ACHTUNG: this section can be removed by removing lvl_tricoef_recip* from evaluate_exchange_matr_kspace_p0!!
 !           allocate(lvl_tricoeff_recip1(max_n_basbas_sp,n_basis,n_basis,n_k_points_min),stat=info) 
